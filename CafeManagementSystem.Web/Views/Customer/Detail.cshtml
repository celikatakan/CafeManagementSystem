@model CafeManagementSystem.Business.Operations.Cafe.Dtos.CafeDto
@using CafeManagementSystem.Business.Operations.Product.Dtos
@using CafeManagementSystem.Business.Operations.Review.Dtos

@{
    var products = ViewBag.Products as List<ProductDto>;
    var reviews = ViewBag.Reviews as List<ReviewDto>;
    var averageRating = reviews != null && reviews.Any() ? Math.Round(reviews.Average(r => r.Rating), 1) : 0;
    var reviewCount = reviews?.Count ?? 0;
}

<style>
    :root {
        --primary-color: #8B4513;
        --primary-dark: #6B3410;
        --secondary-color: #D2691E;
        --accent-color: #F4A460;
        --bg-primary: #FDFAF7;
        --bg-secondary: #F8F4F0;
        --text-primary: #2C1810;
        --text-secondary: #6B4423;
        --text-muted: #8B7355;
        --border-color: #E8D5C4;
        --shadow-light: 0 2px 8px rgba(139, 69, 19, 0.08);
        --shadow-medium: 0 4px 16px rgba(139, 69, 19, 0.12);
        --shadow-heavy: 0 8px 32px rgba(139, 69, 19, 0.16);
        --gradient-primary: linear-gradient(135deg, #8B4513 0%, #D2691E 100%);
        --gradient-secondary: linear-gradient(135deg, #F4A460 0%, #DEB887 100%);
        --success-color: #27AE60;
        --warning-color: #F39C12;
        --danger-color: #E74C3C;
    }

    .detail-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem 1rem;
        min-height: 100vh;
        background: var(--bg-primary);
    }

    .cafe-header {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(20px);
        border-radius: 24px;
        padding: 2.5rem;
        margin-bottom: 2rem;
        box-shadow: var(--shadow-medium);
        border: 1px solid var(--border-color);
        position: relative;
        overflow: hidden;
    }

        .cafe-header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 6px;
            background: var(--gradient-primary);
            border-radius: 24px 24px 0 0;
        }

        .cafe-header::after {
            content: '';
            position: absolute;
            top: -50%;
            right: -50%;
            width: 100%;
            height: 100%;
            background: radial-gradient(circle, rgba(244, 164, 96, 0.1) 0%, transparent 70%);
            pointer-events: none;
        }

    .cafe-title {
        font-size: 2.5rem;
        font-weight: 700;
        background: var(--gradient-primary);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        margin-bottom: 1rem;
        position: relative;
        z-index: 1;
    }

    .cafe-like-section {
        display: flex;
        align-items: center;
        margin-bottom: 1.2rem;
    }

    .cafe-location {
        font-size: 1.2rem;
        color: var(--text-secondary);
        display: flex;
        align-items: center;
        gap: 0.5rem;
        position: relative;
        z-index: 1;
    }

        .cafe-location i {
            color: var(--secondary-color);
            font-size: 1.1rem;
        }

    .cafe-info {
        display: flex;
        align-items: center;
        gap: 1.5rem;
        margin-bottom: 1rem;
    }

    .cafe-rating {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        color: var(--text-secondary);
        font-size: 1.1rem;
    }

    .rating-stars {
        color: var(--warning-color);
        display: flex;
        align-items: center;
        gap: 0.2rem;
    }

    .rating-number {
        font-weight: 600;
        color: var(--text-primary);
    }

    .review-count {
        color: var(--text-muted);
        font-size: 0.9rem;
    }

    .cafe-meta {
        display: flex;
        align-items: center;
        gap: 2rem;
        margin-top: 1rem;
        padding-top: 1rem;
        border-top: 1px solid var(--border-color);
    }

    .meta-item {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        color: var(--text-secondary);
    }

    .meta-item i {
        color: var(--secondary-color);
        font-size: 1.1rem;
    }

    .content-grid {
        display: grid;
        grid-template-columns: 2fr 1fr;
        gap: 2rem;
        align-items: start;
    }

    .products-section {
        background: rgba(255, 255, 255, 0.9);
        backdrop-filter: blur(15px);
        border-radius: 20px;
        padding: 2rem;
        box-shadow: var(--shadow-light);
        border: 1px solid var(--border-color);
    }

    .section-title {
        font-size: 1.8rem;
        font-weight: 600;
        color: var(--text-primary);
        margin-bottom: 1.5rem;
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }

        .section-title i {
            color: var(--secondary-color);
            font-size: 1.5rem;
        }

    .products-grid {
        display: grid;
        gap: 1.5rem;
    }

    .product-card {
        background: rgba(255, 255, 255, 0.8);
        border-radius: 16px;
        padding: 1.5rem;
        border: 2px solid transparent;
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
        display: flex;
        gap: 1rem;
        align-items: center;
    }

        .product-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(45deg, transparent, rgba(244, 164, 96, 0.1), transparent);
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .product-card:hover {
            border-color: var(--accent-color);
            transform: translateY(-4px);
            box-shadow: var(--shadow-medium);
        }

            .product-card:hover::before {
                opacity: 1;
            }

    .product-image {
        width: 80px;
        height: 80px;
        border-radius: 12px;
        object-fit: cover;
        box-shadow: var(--shadow-light);
    }

    .product-content {
        flex: 1;
    }

    .product-info {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
        position: relative;
        z-index: 1;
    }

    .product-name {
        font-size: 1.2rem;
        font-weight: 600;
        color: var(--text-primary);
    }

    .product-price {
        font-size: 1.3rem;
        font-weight: 700;
        color: var(--secondary-color);
        background: var(--gradient-secondary);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }

    .order-btn {
        background: var(--gradient-primary);
        color: white;
        border: none;
        padding: 0.75rem 1.5rem;
        border-radius: 12px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        position: relative;
        z-index: 1;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

        .order-btn:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-medium);
            color: white;
        }

        .order-btn i {
            font-size: 0.9rem;
        }

    .reviews-section {
        background: rgba(255, 255, 255, 0.9);
        backdrop-filter: blur(15px);
        border-radius: 20px;
        padding: 2rem;
        box-shadow: var(--shadow-light);
        border: 1px solid var(--border-color);
        height: fit-content;
        position: sticky;
        top: 2rem;
    }

    .reviews-container {
        max-height: 600px;
        overflow-y: auto;
        padding-right: 0.5rem;
    }

        .reviews-container::-webkit-scrollbar {
            width: 6px;
        }

        .reviews-container::-webkit-scrollbar-track {
            background: var(--bg-secondary);
            border-radius: 10px;
        }

        .reviews-container::-webkit-scrollbar-thumb {
            background: var(--accent-color);
            border-radius: 10px;
        }

            .reviews-container::-webkit-scrollbar-thumb:hover {
                background: var(--secondary-color);
            }

    .review-card {
        background: rgba(248, 244, 240, 0.6);
        border-radius: 12px;
        padding: 1.5rem;
        margin-bottom: 1rem;
        border-left: 4px solid var(--accent-color);
        transition: all 0.3s ease;
    }

        .review-card:hover {
            background: rgba(248, 244, 240, 0.8);
            transform: translateX(4px);
            box-shadow: var(--shadow-light);
        }

    .review-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 0.75rem;
    }

    .review-user {
        font-weight: 600;
        color: var(--text-primary);
    }

    .review-date {
        font-size: 0.9rem;
        color: var(--text-muted);
    }

    .review-rating {
        margin-bottom: 0.75rem;
    }

    .star {
        color: var(--warning-color);
        font-size: 1.1rem;
        margin-right: 0.1rem;
    }

        .star.empty {
            color: var(--border-color);
        }

    .review-comment {
        color: var(--text-secondary);
        line-height: 1.6;
        font-style: italic;
    }

    .no-reviews {
        text-align: center;
        color: var(--text-muted);
        padding: 2rem;
        font-style: italic;
    }

        .no-reviews i {
            font-size: 3rem;
            color: var(--border-color);
            margin-bottom: 1rem;
            display: block;
        }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .detail-container {
            padding: 1rem;
        }

        .cafe-header {
            padding: 1.5rem;
        }

        .cafe-title {
            font-size: 2rem;
        }

        .content-grid {
            grid-template-columns: 1fr;
            gap: 1.5rem;
        }

        .reviews-section {
            position: static;
        }

        .section-title {
            font-size: 1.5rem;
        }

        .product-card {
            padding: 1rem;
        }

        .product-info {
            flex-direction: column;
            align-items: flex-start;
            gap: 0.5rem;
        }
    }

    /* Animation */
    @@keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(30px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .fade-in-up {
        animation: fadeInUp 0.6s ease forwards;
    }

    /* Loading animation for order buttons */
    .order-btn.loading {
        pointer-events: none;
        opacity: 0.7;
    }

        .order-btn.loading::after {
            content: '';
            position: absolute;
            width: 16px;
            height: 16px;
            border: 2px solid transparent;
            border-top: 2px solid white;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-left: 0.5rem;
        }

    @@keyframes spin {
        to {
            transform: rotate(360deg);
        }
    }

    /* Cart Styles */
    .cart-section {
        position: fixed;
        bottom: 0;
        right: 0;
        width: 100%;
        max-width: 400px;
        background: white;
        border-radius: 20px 0 0 0;
        box-shadow: var(--shadow-heavy);
        z-index: 1000;
        transform: translateY(calc(100% - 50px));
        transition: transform 0.3s ease;
    }

    .cart-section.open {
        transform: translateY(0);
    }

    .cart-header {
        padding: 1rem;
        background: var(--primary-color);
        color: white;
        border-radius: 20px 0 0 0;
        cursor: pointer;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .cart-header h3 {
        margin: 0;
        font-size: 1.2rem;
    }

    .cart-badge {
        background: var(--accent-color);
        color: white;
        padding: 0.2rem 0.6rem;
        border-radius: 20px;
        font-size: 0.9rem;
    }

    .cart-items {
        padding: 1rem;
        max-height: 300px;
        overflow-y: auto;
    }

    /* Cart item styles */
    .cart-item {
        display: flex;
        align-items: center;
        gap: 1rem;
        padding: 0.75rem;
        border-bottom: 1px solid var(--border-color);
    }

    .cart-item-image {
        width: 50px;
        height: 50px;
        border-radius: 8px;
        object-fit: cover;
    }

    .cart-item-info {
        flex: 1;
    }

    .cart-item-name {
        font-weight: 600;
        color: var(--text-primary);
    }

    .cart-item-price {
        color: var(--text-secondary);
        font-size: 0.9rem;
    }

    .cart-item-quantity {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .quantity-btn {
        background: var(--bg-secondary);
        border: none;
        width: 24px;
        height: 24px;
        border-radius: 50%;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1rem;
        color: var(--text-primary);
    }

    .cart-total {
        padding: 1rem;
        border-top: 2px solid var(--border-color);
        display: flex;
        justify-content: space-between;
        align-items: center;
        font-weight: 600;
    }

    .cart-actions {
        padding: 1rem;
        display: flex;
        gap: 1rem;
    }

    .cart-action-btn {
        flex: 1;
        padding: 0.75rem;
        border: none;
        border-radius: 12px;
        cursor: pointer;
        font-weight: 600;
        transition: all 0.3s ease;
    }

    .cart-action-btn.clear {
        background: var(--bg-secondary);
        color: var(--text-secondary);
    }

    .cart-action-btn.checkout {
        background: var(--gradient-primary);
        color: white;
    }

    .empty-cart {
        text-align: center;
        padding: 2rem;
        color: var(--text-muted);
    }

    .special-request {
        padding: 1rem;
        border-top: 1px solid var(--border-color);
    }

    .special-request textarea {
        width: 100%;
        padding: 0.75rem;
        border: 1px solid var(--border-color);
        border-radius: 8px;
        margin-top: 0.5rem;
        resize: vertical;
        min-height: 60px;
        font-family: inherit;
    }

    .special-request label {
        display: block;
        margin-bottom: 0.5rem;
        color: var(--text-secondary);
        font-weight: 500;
    }

    /* Guest Count Modal Styles */
    .modal-overlay {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.5);
        z-index: 1100;
        backdrop-filter: blur(5px);
    }

    .guest-count-modal {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: white;
        padding: 2rem;
        border-radius: 20px;
        box-shadow: var(--shadow-heavy);
        z-index: 1200;
        width: 90%;
        max-width: 400px;
        display: none;
    }

    .modal-header {
        margin-bottom: 1.5rem;
        text-align: center;
    }

    .modal-header h3 {
        color: var(--text-primary);
        font-size: 1.5rem;
        margin: 0;
    }

    .guest-count-input {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 1rem;
        margin-bottom: 2rem;
    }

    .guest-count-input button {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        border: none;
        background: var(--bg-secondary);
        color: var(--text-primary);
        font-size: 1.2rem;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .guest-count-input button:hover {
        background: var(--primary-color);
        color: white;
    }

    .guest-count-input span {
        font-size: 1.5rem;
        font-weight: 600;
        color: var(--text-primary);
        min-width: 40px;
        text-align: center;
    }

    .modal-actions {
        display: flex;
        gap: 1rem;
    }

    .modal-actions button {
        flex: 1;
        padding: 0.75rem;
        border: none;
        border-radius: 12px;
        cursor: pointer;
        font-weight: 600;
        transition: all 0.3s ease;
    }

    .modal-actions .cancel-btn {
        background: var(--bg-secondary);
        color: var(--text-secondary);
    }

    .modal-actions .confirm-btn {
        background: var(--gradient-primary);
        color: white;
    }

    .modal-actions button:hover {
        transform: translateY(-2px);
    }

    .cart-guest-count {
        padding: 1rem;
        border-top: 1px solid var(--border-color);
        margin-top: 1rem;
    }

    .cart-guest-count label {
        display: block;
        margin-bottom: 0.5rem;
        color: var(--text-secondary);
        font-weight: 500;
    }

    .guest-count-controls {
        display: flex;
        align-items: center;
        gap: 1rem;
        justify-content: center;
        margin-top: 0.5rem;
    }

    .guest-count-btn {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        border: none;
        background: var(--bg-secondary);
        color: var(--text-primary);
        font-size: 1.2rem;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.3s ease;
    }

    .guest-count-btn:hover {
        background: var(--primary-color);
        color: white;
    }

    .guest-count-display {
        font-size: 1.2rem;
        font-weight: 600;
        color: var(--text-primary);
        min-width: 40px;
        text-align: center;
    }
</style>

<div class="detail-container">
    <!-- Cafe Header -->
    <div class="cafe-header fade-in-up">
        <div class="cafe-info">
            <h1 class="cafe-title">@Model.Name</h1>
            <div class="cafe-like-section" style="margin-bottom:1.2rem;">
                <button id="cafe-like-btn" style="background:none;border:none;cursor:pointer;outline:none;">
                    <i id="cafe-like-icon" class="far fa-heart" style="font-size:1.6rem;color:#E74C3C;vertical-align:middle;"></i>
                </button>
                <span id="cafe-like-count" style="font-size:1.1rem;color:#E74C3C;vertical-align:middle;margin-left:0.3rem;">0</span>
            </div>
            <div class="cafe-rating">
                <div class="rating-stars">
                    @for (int i = 1; i <= 5; i++)
                    {
                        if (i <= Math.Floor(averageRating))
                        {
                            <i class="fas fa-star"></i>
                        }
                        else if (i - 0.5 <= averageRating)
                        {
                            <i class="fas fa-star-half-alt"></i>
                        }
                        else
                        {
                            <i class="far fa-star"></i>
                        }
                    }
                </div>
                <span class="rating-number">@averageRating</span>
                <span class="review-count">(@reviewCount yorum)</span>
            </div>
        </div>
        <div class="cafe-meta">
            <div class="meta-item">
                <i class="fas fa-map-marker-alt"></i>
                <span>@Model.Location</span>
            </div>
            <div class="meta-item">
                <i class="fas fa-utensils"></i>
                <span>@(products?.Count ?? 0) ürün</span>
            </div>
            <div class="meta-item">
                <i class="fas fa-clock"></i>
                <span>09:00 - 22:00</span>
            </div>
        </div>
    </div>

    <!-- Content Grid -->
    <div class="content-grid">
        <!-- Products Section -->
        <div class="products-section fade-in-up">
            <h2 class="section-title">
                <i class="fas fa-utensils"></i>
                Menü
            </h2>
            <div class="products-grid">
                @foreach (var product in products)
                {
                    <div class="product-card">
                        <img src="@product.ImageUrl" alt="@product.ProductName" class="product-image" onerror="this.src='/images/default-product.jpg'">
                        <div class="product-content">
                            <div class="product-info">
                                <span class="product-name">@product.ProductName</span>
                                <span class="product-price">@product.Price ₺</span>
                            </div>
                            <button class="order-btn" data-product-id="@product.Id">
                                <i class="fas fa-plus"></i>
                                Sipariş Ver
                            </button>
                        </div>
                    </div>
                }
            </div>
        </div>

        <!-- Reviews Section -->
        <div class="reviews-section fade-in-up">
            <h2 class="section-title">
                <i class="fas fa-star"></i>
                Yorumlar
            </h2>
            <div class="reviews-container">
                @if (reviews != null && reviews.Any())
                {
                    @foreach (var review in reviews)
                    {
                        <div class="review-card">
                            <div class="review-header">
                                <span class="review-user">@review.UserFullName</span>
                                <span class="review-date">@review.CreatedDate.ToString("dd.MM.yyyy HH:mm")</span>
                            </div>
                            <div class="review-rating">
                                @for (int i = 1; i <= 5; i++)
                                {
                                    <span class="star @(i <= review.Rating ? "" : "empty")">★</span>
                                }
                            </div>
                            <div class="review-comment">
                                "@review.Comment"
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="no-reviews">
                        <i class="fas fa-comment-slash"></i>
                        Bu kafeye henüz yorum yapılmamış.
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- Cart Section -->
    <div class="cart-section" id="cartSection">
        <div class="cart-header" id="cartHeader">
            <h3>Sepetim</h3>
            <span class="cart-badge" id="cartBadge">0</span>
        </div>
        <div class="cart-items" id="cartItems">
            <!-- Cart items will be dynamically added here -->
            <div class="empty-cart">
                <i class="fas fa-shopping-cart"></i>
                <p>Sepetiniz boş</p>
            </div>
        </div>
        <div class="cart-total">
            <span>Toplam:</span>
            <span id="cartTotal">0.00 ₺</span>
        </div>
        <div class="cart-guest-count">
            <label>
                <i class="fas fa-users"></i>
                Kişi Sayısı
            </label>
            <div class="guest-count-controls">
                <button class="guest-count-btn" onclick="updateGuestCount(-1)">-</button>
                <span class="guest-count-display" id="guestCount">1</span>
                <button class="guest-count-btn" onclick="updateGuestCount(1)">+</button>
            </div>
        </div>
        <div class="special-request">
            <label for="specialRequest">
                <i class="fas fa-comment-alt"></i>
                Özel İstek / Not
            </label>
            <textarea id="specialRequest" placeholder="Siparişiniz için özel bir notunuz var mı? (Opsiyonel)"></textarea>
        </div>
        <div class="cart-actions">
            <button class="cart-action-btn clear" onclick="clearCart()">
                <i class="fas fa-trash"></i> Temizle
            </button>
            <button class="cart-action-btn checkout" onclick="checkout()">
                <i class="fas fa-check"></i> Siparişi Onayla
            </button>
        </div>
    </div>

    <!-- Add Review Section (Only for logged-in users) -->
    @{
        var isCustomer = ViewBag.UserIsCustomer != null && (bool)ViewBag.UserIsCustomer;
        var userId = ViewBag.UserId;
    }
    @if (isCustomer)
    {
        <div id="add-review-section" class="fade-in-up" style="margin-top:2.5rem;">
            <h2 class="section-title">
                <i class="fas fa-pen"></i>
                Yorum Yap
            </h2>
            <form id="reviewForm" style="background:rgba(255,255,255,0.95);border-radius:16px;padding:1.5rem;box-shadow:var(--shadow-light);border:1px solid var(--border-color);">
                <input type="hidden" name="CafeId" value="@Model.Id" />
                <input type="hidden" name="UserId" value="@userId" />
                <div style="margin-bottom:1rem;">
                    <label for="rating" style="font-weight:600;">Puan:</label>
                    <select id="rating" name="Rating" required style="margin-left:1rem;padding:0.3rem 0.7rem;border-radius:8px;">
                        <option value="">Seçiniz</option>
                        @for (int i = 5; i >= 1; i--)
                        {
                            <option value="@i">@i</option>
                        }
                    </select>
                </div>
                <div style="margin-bottom:1rem;">
                    <label for="comment" style="font-weight:600;">Yorumunuz:</label>
                    <textarea id="comment" name="Comment" rows="3" maxlength="500" required style="width:100%;border-radius:8px;padding:0.7rem;margin-top:0.5rem;"></textarea>
                </div>
                <button type="submit" class="order-btn" style="margin-top:0.5rem;">
                    <i class="fas fa-paper-plane"></i> Gönder
                </button>
            </form>
            <div id="reviewFormMsg" style="margin-top:1rem;"></div>
        </div>
    }

    <!-- Guest Count Modal -->
    <div class="modal-overlay" id="modalOverlay"></div>
    <div class="guest-count-modal" id="guestCountModal">
        <div class="modal-header">
            <h3>Kişi Sayısı</h3>
        </div>
        <div class="guest-count-input">
            <button onclick="updateGuestCount(-1)">-</button>
            <span id="guestCount">1</span>
            <button onclick="updateGuestCount(1)">+</button>
        </div>
        <div class="modal-actions">
            <button class="cancel-btn" onclick="closeGuestCountModal()">İptal</button>
            <button class="confirm-btn" onclick="confirmGuestCount()">Sepete Ekle</button>
        </div>
    </div>
</div>

<script>
    let cart = [];
    let notificationCount = 0;
    let currentProductData = null;

    // Sayfa yüklendiğinde event listener'ları ekle
    document.addEventListener('DOMContentLoaded', function() {
        // Sipariş butonlarına event listener ekle
        document.querySelectorAll('.order-btn').forEach(button => {
            button.addEventListener('click', function(event) {
                const productId = parseInt(this.getAttribute('data-product-id'));
                const productCard = this.closest('.product-card');
                const productName = productCard.querySelector('.product-name').textContent;
                const priceText = productCard.querySelector('.product-price').textContent;
                const price = parseFloat(priceText.replace('₺', '').trim());
                const imageUrl = productCard.querySelector('.product-image').src;
                
                addToCart(productId, productName, price, imageUrl);
            });
        });

        // Sepet başlığına tıklama event listener'ı ekle
        const cartHeader = document.querySelector('.cart-header');
        if (cartHeader) {
            cartHeader.addEventListener('click', toggleCart);
        }

        // Initialize animations
        initializeAnimations();
        
        // Initialize review form
        initializeReviewForm();

        const apiBase = "https://localhost:7265";
        const cafeId = @Model.Id;
        const likeIcon = document.getElementById('cafe-like-icon');
        const likeCount = document.getElementById('cafe-like-count');
        const likeBtn = document.getElementById('cafe-like-btn');
        let liked = false;

        // Beğeni sayısını çek
        const token = localStorage.getItem('jwtToken');
        if (token) {
            fetch(`${apiBase}/api/Cafes/${cafeId}/likes/count`, {
                headers: {
                    'Authorization': 'Bearer ' + token
                }
            })
                .then(r => r.ok ? r.json() : { count: 0 })
                .then(data => {
                    likeCount.textContent = data.count ?? 0;
                });

            // Kullanıcı beğenmiş mi?
            fetch(`${apiBase}/api/Cafes/${cafeId}/likes/hasliked`, {
                headers: {
                    'Authorization': 'Bearer ' + token
                }
            })
                .then(r => r.ok ? r.json() : { liked: false })
                .then(data => {
                    liked = data.liked ?? false;
                    updateLikeIcon();
                });
        } else {
            likeCount.textContent = 0;
            // İstersen burada kullanıcıya login olması gerektiğini belirten bir uyarı gösterebilirsin
        }

        function updateLikeIcon() {
            if (liked) {
                likeIcon.classList.remove('far');
                likeIcon.classList.add('fas');
            } else {
                likeIcon.classList.remove('fas');
                likeIcon.classList.add('far');
            }
        }

        likeBtn.addEventListener('click', function () {
            const token = localStorage.getItem('jwtToken');
            if (!token) {
                alert('Beğenmek için giriş yapmalısınız!');
                return;
            }
            fetch(`${apiBase}/api/Cafes/${cafeId}/likes/hasliked`, {
                headers: {
                    'Authorization': 'Bearer ' + token
                }
            })
                .then(r => r.ok ? r.json() : { liked: false })
                .then(data => {
                    liked = data.liked ?? false;
                    if (!liked) {
                        // Beğen
                        fetch(`${apiBase}/api/Cafes/${cafeId}/like`, {
                            method: 'POST',
                            headers: {
                                'Authorization': 'Bearer ' + token
                            }
                        })
                            .then(r => {
                                if (r.ok) {
                                    liked = true;
                                    updateLikeIcon();
                                    fetch(`${apiBase}/api/Cafes/${cafeId}/likes/count`, {
                                        headers: {
                                            'Authorization': 'Bearer ' + token
                                        }
                                    }).then(r => r.ok ? r.json() : { count: 0 }).then(data => { likeCount.textContent = data.count ?? 0; });
                                } else if (r.status === 401) {
                                    alert('Beğenmek için giriş yapmalısınız!');
                                }
                            });
                    } else {
                        // Beğeniyi kaldır
                        fetch(`${apiBase}/api/Cafes/${cafeId}/like`, {
                            method: 'DELETE',
                            headers: {
                                'Authorization': 'Bearer ' + token
                            }
                        })
                            .then(r => {
                                if (r.ok) {
                                    liked = false;
                                    updateLikeIcon();
                                    fetch(`${apiBase}/api/Cafes/${cafeId}/likes/count`, {
                                        headers: {
                                            'Authorization': 'Bearer ' + token
                                        }
                                    }).then(r => r.ok ? r.json() : { count: 0 }).then(data => { likeCount.textContent = data.count ?? 0; });
                                } else if (r.status === 401) {
                                    alert('Beğenmek için giriş yapmalısınız!');
                                }
                            });
                    }
                });
        });
    });

    function showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        const topOffset = 20 + (notificationCount * 70);
        
        notification.style.cssText = `
            position: fixed;
            top: ${topOffset}px;
            right: 20px;
            padding: 1rem 1.5rem;
            border-radius: 12px;
            color: white;
            font-weight: 500;
            z-index: 10000;
            animation: slideIn 0.3s ease;
            background: ${type === 'success' ? 'var(--success-color)' : type === 'danger' ? 'var(--danger-color)' : 'var(--primary-color)'};
        `;
        notification.textContent = message;

        document.body.appendChild(notification);
        notificationCount++;

        setTimeout(() => {
            notification.style.animation = 'slideOut 0.3s ease';
            setTimeout(() => {
                notification.remove();
                notificationCount--;
            }, 300);
        }, 3000);
    }

    function toggleCart() {
        const cartSection = document.getElementById('cartSection');
        cartSection.classList.toggle('open');
    }

    function clearCart() {
        cart = [];
        updateCartUI();
        document.getElementById('specialRequest').value = '';
        document.getElementById('guestCount').textContent = '1';
        setTimeout(() => showNotification('Sepet temizlendi', 'info'), 100);
    }

    function updateGuestCount(change) {
        const countElement = document.getElementById('guestCount');
        let count = parseInt(countElement.textContent);
        count = Math.max(1, count + change);
        countElement.textContent = count;
    }

    function showGuestCountModal(productId, productName, price) {
        currentProductData = { productId, productName, price };
        document.getElementById('guestCount').textContent = '1';
        document.getElementById('modalOverlay').style.display = 'block';
        document.getElementById('guestCountModal').style.display = 'block';
    }

    function closeGuestCountModal() {
        document.getElementById('modalOverlay').style.display = 'none';
        document.getElementById('guestCountModal').style.display = 'none';
        currentProductData = null;
    }

    function confirmGuestCount() {
        if (!currentProductData) return;
        const guestCount = parseInt(document.getElementById('guestCount').textContent);
        addToCart(currentProductData.productId, currentProductData.productName, currentProductData.price);
        closeGuestCountModal();
    }

    function addToCart(productId, productName, price, imageUrl) {
        const existingItem = cart.find(item => item.productId === productId);
        
        if (existingItem) {
            existingItem.quantity += 1;
        } else {
            cart.push({
                productId: productId,
                productName: productName,
                price: price,
                quantity: 1,
                imageUrl: imageUrl
            });
        }
        
        updateCartUI();
        showNotification('Ürün sepete eklendi', 'success');
    }

    function updateCartUI() {
        const cartItems = document.getElementById('cartItems');
        const cartBadge = document.getElementById('cartBadge');
        const cartTotal = document.getElementById('cartTotal');
        
        const totalItems = cart.reduce((sum, item) => sum + item.quantity, 0);
        cartBadge.textContent = totalItems;
        
        if (cart.length === 0) {
            cartItems.innerHTML = `
                <div class="empty-cart">
                    <i class="fas fa-shopping-cart"></i>
                    <p>Sepetiniz boş</p>
                </div>
            `;
        } else {
            cartItems.innerHTML = cart.map(item => `
                <div class="cart-item">
                    <img src="${item.imageUrl}" alt="${item.productName}" class="cart-item-image" onerror="this.src='/images/default-product.jpg'">
                    <div class="cart-item-info">
                        <div class="cart-item-name">${item.productName}</div>
                        <div class="cart-item-price">${item.price} ₺</div>
                    </div>
                    <div class="cart-item-quantity">
                        <button class="quantity-btn" onclick="updateQuantity(${item.productId}, -1)">-</button>
                        <span>${item.quantity}</span>
                        <button class="quantity-btn" onclick="updateQuantity(${item.productId}, 1)">+</button>
                    </div>
                </div>
            `).join('');
        }
        
        const total = cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
        cartTotal.textContent = `${total.toFixed(2)} ₺`;
    }

    function updateQuantity(productId, change) {
        const item = cart.find(item => item.productId === productId);
        if (item) {
            item.quantity += change;
            if (item.quantity <= 0) {
                cart = cart.filter(i => i.productId !== productId);
            }
            updateCartUI();
        }
    }

    async function checkout() {
        if (cart.length === 0) {
            showNotification('Sepetiniz boş!', 'danger');
            return;
        }

        const userId = document.querySelector('input[name="UserId"]')?.value;
        const specialRequest = document.getElementById('specialRequest').value.trim();
        const guestCount = parseInt(document.getElementById('guestCount').textContent);

        // Sepet detaylarını hazırla
        const orderDetails = cart.map(item => `${item.productName} x ${item.quantity}`).join(', ');
        
        try {
            const orderData = {
                ProductId: cart[0].productId,
                UserId: parseInt(userId),
                GuestCount: guestCount,
                SpecialRequest: `Sipariş Detayı: ${orderDetails}${specialRequest ? `\nÖzel İstek: ${specialRequest}` : ''}`
            };

            const response = await fetch('https://localhost:7265/api/Orders', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(orderData)
            });

            if (!response.ok) {
                throw new Error('Sipariş oluşturulamadı');
            }

            showNotification('Siparişiniz başarıyla oluşturuldu!', 'success');
            clearCart();
            toggleCart();
        } catch (error) {
            console.error('İşlem hatası:', error);
            showNotification('Sipariş oluşturulurken bir hata oluştu', 'danger');
        }
    }

    function orderProduct(productId, event) {
        if (event) {
            event.preventDefault();
        }
        
        const button = event ? event.target.closest('.order-btn') : document.querySelector(`[data-product-id="${productId}"]`);
        if (!button) {
            console.error('Product button not found');
            return;
        }

        const productCard = button.closest('.product-card');
        if (!productCard) {
            console.error('Product card not found');
            return;
        }

        const productName = productCard.querySelector('.product-name')?.textContent;
        const priceText = productCard.querySelector('.product-price')?.textContent;
        const imageUrl = productCard.querySelector('.product-image')?.src;

        if (!productName || !priceText) {
            console.error('Product information not found');
            return;
        }

        const price = parseFloat(priceText.replace('₺', '').trim());
        if (isNaN(price)) {
            console.error('Invalid price format');
            return;
        }

        addToCart(productId, productName, price, imageUrl);
    }

    function initializeAnimations() {
        // Staggered animation for product cards
        const productCards = document.querySelectorAll('.product-card');
        productCards.forEach((card, index) => {
            card.style.opacity = '0';
            card.style.transform = 'translateY(20px)';
            setTimeout(() => {
                card.style.transition = 'all 0.6s ease';
                card.style.opacity = '1';
                card.style.transform = 'translateY(0)';
            }, index * 100);
        });

        // Staggered animation for review cards
        const reviewCards = document.querySelectorAll('.review-card');
        reviewCards.forEach((card, index) => {
            card.style.opacity = '0';
            card.style.transform = 'translateX(-20px)';
            setTimeout(() => {
                card.style.transition = 'all 0.6s ease';
                card.style.opacity = '1';
                card.style.transform = 'translateX(0)';
            }, (index * 100) + 200);
        });

        // Add CSS for animations
        const style = document.createElement('style');
        style.textContent = `
            @@keyframes slideIn {
                from { transform: translateX(100%); opacity: 0; }
                to { transform: translateX(0); opacity: 1; }
            }
            @@keyframes slideOut {
                from { transform: translateX(0); opacity: 1; }
                to { transform: translateX(100%); opacity: 0; }
            }
        `;
        document.head.appendChild(style);
    }

    function initializeReviewForm() {
        const reviewForm = document.getElementById('reviewForm');
        if (reviewForm) {
            reviewForm.addEventListener('submit', async function (e) {
                e.preventDefault();
                const form = e.target;
                const data = {
                    cafeId: parseInt(form.CafeId.value),
                    userId: parseInt(form.UserId.value),
                    rating: parseInt(form.Rating.value),
                    comment: form.Comment.value
                };
                const btn = form.querySelector('button[type="submit"]');
                btn.classList.add('loading');
                btn.disabled = true;
                document.getElementById('reviewFormMsg').textContent = '';

                try {
                    const res = await fetch('https://localhost:7265/api/Reviews', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(data),
                        credentials: 'same-origin'
                    });
                    const result = await res.json();
                    if (res.ok) {
                        showNotification('Yorumunuz eklendi!', 'success');
                        form.reset();
                        setTimeout(() => window.location.reload(), 1200);
                    } else {
                        document.getElementById('reviewFormMsg').textContent = result || 'Bir hata oluştu.';
                    }
                } catch {
                    document.getElementById('reviewFormMsg').textContent = 'Sunucuya bağlanılamadı.';
                }
                btn.classList.remove('loading');
                btn.disabled = false;
            });
        }
    }
</script>